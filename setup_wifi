#!/usr/bin/env python
"""
setup_wifi.py
author: Ian Brault <ian.brault@engineering.ucla.edu>

Connects to a Raspberry Pi over SSH (via a local USB connection) in order to
set up and persist a WiFi network connection.
"""

from __future__ import print_function

import getpass
import inspect
import os
import re
import subprocess
import sys
import textwrap


_DEBUG   = False

RPI_HOST = 'raspberrypi.local'
RPI_USER = 'pi'
RPI_PWD  = 'blueberry'

KEY_DIR  = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'keys')
PRIV_KEY = os.path.join(KEY_DIR, 'rpi_id_key')

AIRPORT_PATH = os.path.join(
    '/System', 'Library', 'PrivateFrameworks', 'Apple80211.framework',
    'Versions', 'Current', 'Resources', 'airport')

WIFACE = 'wlan0'


def dprint(msg):
    if _DEBUG:
        print('%s: %s' % (inspect.stack()[1][3], msg))


def bold(string):
    return u"\u001b[1m%s\u001b[0m" % string


def boldprint(string):
    print(bold(string))


def ping_rpi():
    """
    Scans for the Raspberry Pi over the local network. Returns a boolean
    indicating success.
    """
    cmd = ['ping', '-c', '1', RPI_HOST]
    dprint(' '.join(cmd))

    try:
        rc = subprocess.call(cmd)
    except subprocess.CalledProcessError as ex:
        rc = ex.returncode
    dprint('returned: %d' % rc)

    return rc == 0


def get_available_networks():
    """
    Gets a list of available WiFi networks. Returns a sorted list of unique
    SSID strings if successful, [] otherwise
    """
    cmd = [AIRPORT_PATH, '-s']
    dprint(' '.join(cmd))

    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as ex:
        dprint('failed and returned:\n%s' % ex.output.decode('utf-8'))
        return []

    output = output.decode('utf-8')
    dprint('returned:\n%s' % output)

    # parse SSIDs from program output
    ssids = set()
    ssid_re = r' *(.+) (?:[0-9a-f]{2}:?){6}'
    for line in output.split('\n'):
        match = re.search(ssid_re, line)
        if match:
            ssids.add(match.group(1))

    return sorted(list(ssids))


def upload_wpa_file(ssid, password):
    """
    Uploads a WPA supplicant configuration file to the Raspberry Pi that
    contains the provided network details. Returns a boolean indicating success
    """
    # prepare the WPA supplicant entry
    entry = textwrap.dedent('''\
    ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
    update_config=1
    country=US
    network={
        ssid="%s"
        psk="%s"
    }
    ''') % (ssid, password)
    entry = entry.replace('\n', '\\n').replace('\t', '\\t')

    wpa_filepath = '/etc/wpa_supplicant/wpa_supplicant.conf'
    rcmd = 'echo -en \'%s\' | sudo tee %s > /dev/null' % (entry, wpa_filepath)
    cmd = ['ssh', '-i', PRIV_KEY, '%s@%s' % (RPI_USER, RPI_HOST), rcmd]
    dprint(' '.join(cmd))

    try:
        rc = subprocess.call(cmd)
    except subprocess.CalledProcessError as ex:
        rc = ex.returncode
    dprint('returned: %d' % rc)

    return rc == 0


def reconfigure_iface(iface):
    """
    Reconfigures the Raspberry Pi wireless interface. Used to reload the
    network connection on the device once it has been changed. Returns a
    boolean indicating success
    """
    # note the /sbin prefix: the command fails without it for some reason
    rcmd = '/sbin/wpa_cli -i %s reconfigure' % iface
    cmd = ['ssh', '-i', PRIV_KEY, '%s@%s' % (RPI_USER, RPI_HOST), rcmd]
    dprint(' '.join(cmd))

    try:
        output = subprocess.check_output(cmd, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as ex:
        dprint('failed and returned:\n%s' % ex.output.decode('utf-8'))
        return False

    output = output.decode('utf-8')
    dprint('returned:\n%s' % output)

    # still have to check stdout, will print FAIL if configuration failed
    return output.strip() == 'OK'


def connect_rpi_to_network(ssid, password):
    """
    Connects the Raspberry Pi to the provided WiFi network. Returns a boolean
    indicating success
    """
    # upload the WPA supplicant file
    ok = upload_wpa_file(ssid, password)
    if not ok:
        return False

    # reconfigure the wireless interface to use the new network details
    return reconfigure_iface(WIFACE)


def main():
    boldprint('Scanning for your lamp... ')
    if ping_rpi():
        print('DONE')
    else:
        print(
            'ERROR: could not find the device; ensure that it is connected '
            'to your computer and that Internet sharing is enabled')
        sys.exit(1)

    boldprint('\nSearching for WiFi networks... ')
    ssids = sorted(get_available_networks())
    if ssids:
        print('Found %d WiFi networks\n' % len(ssids))
    else:
        print('ERROR: failed to find any WiFi networks')
        sys.exit(1)

    # print networks
    print('%s\n'
          % '\n'.join([
            '(%d) %s' % (i, ssid) for i, ssid in enumerate(ssids, start=1)]))

    # prompt the user to select a network
    i_ssid = -1
    while not (0 < i_ssid <= len(ssids)):
        ssid_in = input(
            bold('Which network would you like to connect to? (1-%d): '
                 % len(ssids)))

        try:
            i_ssid = int(ssid_in)
        except ValueError:
            pass

    ssid = ssids[i_ssid - 1]

    # prompt the user for the network password (if required)
    password = getpass.getpass(
        prompt=bold('Enter the password for %s: ' % ssid))

    boldprint('\nConnecting the device to %s... ' % ssid)
    if connect_rpi_to_network(ssid, password):
        print('DONE\n')
    else:
        print('ERROR: could not connect the device to the network')
        sys.exit(1)


if __name__ == '__main__':
    if '-d' in sys.argv or '--debug' in sys.argv:
        _DEBUG = True
    try:
        main()
    except KeyboardInterrupt:
        print('\nCtrl+C received: exiting')

    boldprint('The program has completed; you may now close the window')
